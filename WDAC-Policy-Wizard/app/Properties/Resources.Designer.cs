//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WDAC_Wizard.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WDAC_Wizard.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _switch {
            get {
                object obj = ResourceManager.GetObject("switch", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap add_button {
            get {
                object obj = ResourceManager.GetObject("add-button", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The F8 preboot menu is disabled by default. This rule option allows the F8 menu to appear to physically present users..
        /// </summary>
        internal static string AdvancedBootOpts_Info {
            get {
                return ResourceManager.GetString("AdvancedBootOpts_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap back {
            get {
                object obj = ResourceManager.GetObject("back", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown.
        /// </summary>
        internal static string BadEventPubValue {
            get {
                return ResourceManager.GetString("BadEventPubValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WDAC Wizard could not open the WDAC BIN file. The most likely reason is that the Wizard failed to convert the policy XML file to binary.
        ///
        ///Please check the log file in .
        /// </summary>
        internal static string BINFileOpen_Error {
            get {
                return ResourceManager.GetString("BINFileOpen_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap blank_check_box {
            get {
                object obj = ResourceManager.GetObject("blank_check_box", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap blank_check_box_32 {
            get {
                object obj = ResourceManager.GetObject("blank-check-box_32", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to wdac-wizard-logs.
        /// </summary>
        internal static string BlobContainerString {
            get {
                return ResourceManager.GetString("BlobContainerString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used when the WDAC policy is in enforcement mode. When a driver fails during startup, the WDAC policy will be placed in audit mode so that Windows will load..
        /// </summary>
        internal static string BootAudit_Info {
            get {
                return ResourceManager.GetString("BootAudit_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose a location to save your edited WDAC Policy.
        /// </summary>
        internal static string BrowseForXmlSaveLoc {
            get {
                return ResourceManager.GetString("BrowseForXmlSaveLoc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cancel {
            get {
                object obj = ResourceManager.GetObject("cancel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cctv {
            get {
                object obj = ResourceManager.GetObject("cctv", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error. Could not build certificate chain for.
        /// </summary>
        internal static string CertificateBuild_Error {
            get {
                return ResourceManager.GetString("CertificateBuild_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap check_box_checked {
            get {
                object obj = ResourceManager.GetObject("check-box-checked", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap check_box_checked_32 {
            get {
                object obj = ResourceManager.GetObject("check_box_checked_32", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap check_box_unchecked {
            get {
                object obj = ResourceManager.GetObject("check-box-unchecked", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select a WDAC event log source to parse before continuing.
        /// </summary>
        internal static string ChooseEventLog_Error {
            get {
                return ResourceManager.GetString("ChooseEventLog_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select a policy XML file to edit before continuing.
        /// </summary>
        internal static string ChoosePolicyToEdit_Error {
            get {
                return ResourceManager.GetString("ChoosePolicyToEdit_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap circular_shape_silhouette {
            get {
                object obj = ResourceManager.GetObject("circular_shape_silhouette", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}.
        /// </summary>
        internal static string ComInitialGuid {
            get {
                return ResourceManager.GetString("ComInitialGuid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM Object Guid is invalid. Please see the docs for more information..
        /// </summary>
        internal static string ComInvalidGuid {
            get {
                return ResourceManager.GetString("ComInvalidGuid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All Keys.
        /// </summary>
        internal static string ComObjectAllKeys {
            get {
                return ResourceManager.GetString("ComObjectAllKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to N/A.
        /// </summary>
        internal static string DefaultFileAttributeString {
            get {
                return ResourceManager.GetString("DefaultFileAttributeString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1.0.0.0.
        /// </summary>
        internal static string DefaultPFNVersion {
            get {
                return ResourceManager.GetString("DefaultPFNVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0.0.0.0.
        /// </summary>
        internal static string DefaultVersionString {
            get {
                return ResourceManager.GetString("DefaultVersionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user has canceled deleting the row from the SigningRules_Control.
        /// </summary>
        internal static string DeleteRowsCanceled {
            get {
                return ResourceManager.GetString("DeleteRowsCanceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables policy enforcement for .NET applications and DLLs..
        /// </summary>
        internal static string DynamicSecurity_Info {
            get {
                return ResourceManager.GetString("DynamicSecurity_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;SiPolicy xmlns=&quot;urn:schemas-microsoft-com:sipolicy&quot; PolicyType=&quot;Base Policy&quot;&gt;
        ///  &lt;VersionEx&gt;10.0.0.0&lt;/VersionEx&gt;
        ///  &lt;PlatformID&gt;{2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}&lt;/PlatformID&gt;
        ///  &lt;Rules&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Unsigned System Integrity Policy&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Audit Mode&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Advanced Boot Options Menu&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Required:En [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EmptyWDAC {
            get {
                return ResourceManager.GetString("EmptyWDAC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EmptyWDAC.xml.
        /// </summary>
        internal static string EmptyWdacXml {
            get {
                return ResourceManager.GetString("EmptyWdacXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft-Windows-Applocker/MSI and Script.
        /// </summary>
        internal static string EventLogAppLocker {
            get {
                return ResourceManager.GetString("EventLogAppLocker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft-Windows-CodeIntegrity/Operational.
        /// </summary>
        internal static string EventLogCodeIntegrity {
            get {
                return ResourceManager.GetString("EventLogCodeIntegrity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WDAC Wizard successfully parsed all of the WDAC Event Logs.
        /// </summary>
        internal static string EventLogConversionSuccess {
            get {
                return ResourceManager.GetString("EventLogConversionSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In addition to being WHQL signed, this rule requires drivers must have been submitted by a partner that has an Extended Verification (EV) certificate..
        /// </summary>
        internal static string EVSigners_Info {
            get {
                return ResourceManager.GetString("EVSigners_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to e.g. {fd756ea8-ad7f-4e30-96bd-8778288212f6}.
        /// </summary>
        internal static string ExampleBasePolicyId {
            get {
                return ResourceManager.GetString("ExampleBasePolicyId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap external_link_symbol {
            get {
                object obj = ResourceManager.GetObject("external-link-symbol", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap external_link_symbol_highlight {
            get {
                object obj = ResourceManager.GetObject("external-link-symbol-highlight", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap externalLink {
            get {
                object obj = ResourceManager.GetObject("externalLink", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WDAC Wizard encountered this exception trying to open this file 
        /// .
        /// </summary>
        internal static string FileOpen_Exception {
            get {
                return ResourceManager.GetString("FileOpen_Exception", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule applies to all files signed by this issuing CA and publisher, 
        ///and this original filename with a version at or above the specified file version number..
        /// </summary>
        internal static string FilePublisherInfo {
            get {
                return ResourceManager.GetString("FilePublisherInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, WDAC policies will not trust flight-signed binaries, only production binaries..
        /// </summary>
        internal static string FlightSigning_Info {
            get {
                return ResourceManager.GetString("FlightSigning_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap gear {
            get {
                object obj = ResourceManager.GetObject("gear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid custom hashes specified. The WDAC Wizard was unable to detect at least 1 hash..
        /// </summary>
        internal static string HashEmptyList_Error {
            get {
                return ResourceManager.GetString("HashEmptyList_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap house {
            get {
                object obj = ResourceManager.GetObject("house", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, code integrity runs in a hypervisor-protected container..
        /// </summary>
        internal static string HVCI_Info {
            get {
                return ResourceManager.GetString("HVCI_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When the Intelligent Security Graph is used, WDAC uses attributes to authorize the file. When enabled, WDAC will periodically revalidate the reputation..
        /// </summary>
        internal static string InvalidateEAs_Info {
            get {
                return ResourceManager.GetString("InvalidateEAs_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file attribute selected cannot be N/A or empty. Please select another attribute or use custom values. .
        /// </summary>
        internal static string InvalidAttributeSelection_Error {
            get {
                return ResourceManager.GetString("InvalidAttributeSelection_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Base Policy Id entered does not match the format expected. E.g. {fd756ea8-ad7f-4e30-96bd-8778288212f6}.
        /// </summary>
        internal static string InvalidBasePolicyId {
            get {
                return ResourceManager.GetString("InvalidBasePolicyId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zero attributes are selected. Please select at least one attribute to add to the rule..
        /// </summary>
        internal static string InvalidCheckboxState {
            get {
                return ResourceManager.GetString("InvalidCheckboxState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid custom rule. Please set the rule type and reference file before proceeding..
        /// </summary>
        internal static string InvalidCustomRule_Error {
            get {
                return ResourceManager.GetString("InvalidCustomRule_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This EKU is not valid or could not be converted to DER encoding. E.g. of a properly formated
        ///EKU is 1.3.6.1.4.1.311.76.3.1.
        /// </summary>
        internal static string InvalidEKUFormat_Error {
            get {
                return ResourceManager.GetString("InvalidEKUFormat_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one rule must be created before building the policy file. .
        /// </summary>
        internal static string InvalidEventRulesCreated {
            get {
                return ResourceManager.GetString("InvalidEventRulesCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kernel mode components cannot be allowed or denied using packaged app or path rules..
        /// </summary>
        internal static string InvalidKMCIRule {
            get {
                return ResourceManager.GetString("InvalidKMCIRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid path rule. %OSDRIVE%, %WINDIR%, %SYSTEM32% are the only supported macros..
        /// </summary>
        internal static string InvalidPath_Error {
            get {
                return ResourceManager.GetString("InvalidPath_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid publisher CN input. Publisher input must follow format: &apos;CN=PublisherName&apos; or &apos;PublisherName&apos;. Other fields
        ///like &apos;O=&apos; or &apos;L=&apos; must be removed..
        /// </summary>
        internal static string InvalidPublisherFormat_Error {
            get {
                return ResourceManager.GetString("InvalidPublisherFormat_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select a rule type and a file to allow or deny..
        /// </summary>
        internal static string InvalidRule_Error {
            get {
                return ResourceManager.GetString("InvalidRule_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one of Usermode Rule or Kernel Rule checkboxes must be checked.
        /// </summary>
        internal static string InvalidSigningScenarioCheckboxState {
            get {
                return ResourceManager.GetString("InvalidSigningScenarioCheckboxState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule is not modifiable on supplemental policies. The rule state is inherited from the base policy being supplemented..
        /// </summary>
        internal static string InvalidSupplementalRule_Info {
            get {
                return ResourceManager.GetString("InvalidSupplementalRule_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule is not valid or modifiable on supplemental policies..
        /// </summary>
        internal static string InvalidSupplementalRule_NoInherit_Info {
            get {
                return ResourceManager.GetString("InvalidSupplementalRule_NoInherit_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid input. Version input must follow w.x.y.z format and &lt; 65535.65535.65535.65535.
        /// </summary>
        internal static string InvalidVersion_Error {
            get {
                return ResourceManager.GetString("InvalidVersion_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid custom version input. Version input must follow w.x.y.z format 
        ///and &lt; 65535.65535.65535.65535.
        /// </summary>
        internal static string InvalidVersionFormat_Error {
            get {
                return ResourceManager.GetString("InvalidVersionFormat_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid custom version input. Minimum version must be less than the maximum version.
        /// </summary>
        internal static string InvalidVersionRange_Error {
            get {
                return ResourceManager.GetString("InvalidVersionRange_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, applications with known good reputation as defined by Microsoft’s Intelligent Security Graph (ISG) are allowlisted..
        /// </summary>
        internal static string ISG_Info {
            get {
                return ResourceManager.GetString("ISG_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {A244370E-44C9-4C06-B551-F6016E563076}.
        /// </summary>
        internal static string LegacyPolicyID_GUID {
            get {
                return ResourceManager.GetString("LegacyPolicyID_GUID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap loading {
            get {
                object obj = ResourceManager.GetObject("loading", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap locked_padlock {
            get {
                object obj = ResourceManager.GetObject("locked_padlock", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, applications installed by a software distribution solution, such as SCCM, are allowlisted..
        /// </summary>
        internal static string ManagedInst_Info {
            get {
                return ResourceManager.GetString("ManagedInst_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap merge {
            get {
                object obj = ResourceManager.GetObject("merge", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AllowMicrosoft - SingleFormat.xml.
        /// </summary>
        internal static string MicrosoftSingleTemplate {
            get {
                return ResourceManager.GetString("MicrosoftSingleTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AllowMicrosoft.xml.
        /// </summary>
        internal static string MicrosoftTemplate {
            get {
                return ResourceManager.GetString("MicrosoftTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap minus_button {
            get {
                object obj = ResourceManager.GetObject("minus-button", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/windows/security/threat-protection/windows-defender-application-control/allow-com-object-registration-in-windows-defender-application-control-policy.
        /// </summary>
        internal static string MSDocLink_ComObjects {
            get {
                return ResourceManager.GetString("MSDocLink_ComObjects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/windows/security/threat-protection/windows-defender-application-control/select-types-of-rules-to-create#windows-defender-application-control-file-rule-levels.
        /// </summary>
        internal static string MSDocLink_RuleLevels {
            get {
                return ResourceManager.GetString("MSDocLink_RuleLevels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap newPolicy {
            get {
                object obj = ResourceManager.GetObject("newPolicy", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap newPolicy1 {
            get {
                object obj = ResourceManager.GetObject("newPolicy1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap next {
            get {
                object obj = ResourceManager.GetObject("next", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap next_256px {
            get {
                object obj = ResourceManager.GetObject("next_256px", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, future WDAC policy updates are applied without requiring a system reboot..
        /// </summary>
        internal static string NoReboot_Info {
            get {
                return ResourceManager.GetString("NoReboot_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap not_extendable {
            get {
                object obj = ResourceManager.GetObject("not-extendable", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy path must be given before continuing..
        /// </summary>
        internal static string NullXmlPath {
            get {
                return ResourceManager.GetString("NullXmlPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap office {
            get {
                object obj = ResourceManager.GetObject("office", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse for a file to use as a reference for the WDAC rule..
        /// </summary>
        internal static string OpenPEFileDialogTitle {
            get {
                return ResourceManager.GetString("OpenPEFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse for existing WDAC Policy File..
        /// </summary>
        internal static string OpenXMLFileDialogTitle {
            get {
                return ResourceManager.GetString("OpenXMLFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This path rule is only supported on Windows 11 (versions 21H2 and 22H2). It will be ignored on Windows 10 and all Windows Server versions. Select Cancel to fix the path rule.
        ///
        ///Do you want the Wizard to warn you about these types of path rules in the future? .
        /// </summary>
        internal static string PathRule_Warning {
            get {
                return ResourceManager.GetString("PathRule_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule applies to all files signed by a certificate from this issuing CA. .
        /// </summary>
        internal static string PCACertificateInfo {
            get {
                return ResourceManager.GetString("PCACertificateInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of selected packaged apps is empty. Please select at least 1 packaged app.
        /// </summary>
        internal static string PFNEmptyList_Error {
            get {
                return ResourceManager.GetString("PFNEmptyList_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type the name of the package to begin the search..
        /// </summary>
        internal static string PFNSearch_Warn {
            get {
                return ResourceManager.GetString("PFNSearch_Warn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error building your policy. Press home to begin again.
        ///
        ///Please check the log file in .
        /// </summary>
        internal static string PolicyBuild_Error {
            get {
                return ResourceManager.GetString("PolicyBuild_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule applies to all files signed by this issuing CA and publisher..
        /// </summary>
        internal static string PublisherInfo {
            get {
                return ResourceManager.GetString("PublisherInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap question_sign1 {
            get {
                object obj = ResourceManager.GetObject("question_sign1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap radio_off {
            get {
                object obj = ResourceManager.GetObject("radio_off", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap radio_off_button {
            get {
                object obj = ResourceManager.GetObject("radio-off-button", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap radio_on {
            get {
                object obj = ResourceManager.GetObject("radio_on", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap radio_on_button {
            get {
                object obj = ResourceManager.GetObject("radio-on-button", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to reset all settings to their original state?.
        /// </summary>
        internal static string ResetSettingsString {
            get {
                return ResourceManager.GetString("ResetSettingsString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, WDAC will treat revoked and expired binaries as unsigned. .
        /// </summary>
        internal static string RevokedAsUnsigned_Info {
            get {
                return ResourceManager.GetString("RevokedAsUnsigned_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is an exception rule in progress.
        ///Are you sure you want to abandon the exception rule creation workflow?.
        /// </summary>
        internal static string RuleExceptionInProgressText {
            get {
                return ResourceManager.GetString("RuleExceptionInProgressText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of selected rule levels is empty. Please select at least 1 rule level to use while scanning the folder..
        /// </summary>
        internal static string RuleLevelEmptyList_Error {
            get {
                return ResourceManager.GetString("RuleLevelEmptyList_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to proceed to Exceptions Panel. WDAC does not support rule exceptions for this rule type.
        ///Please select the  &apos;Create Rule&apos; button..
        /// </summary>
        internal static string RuleTypeNoExceptionAllowed {
            get {
                return ResourceManager.GetString("RuleTypeNoExceptionAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Turning this off will disable default FilePath rule protection of enforcing user-writeability and only allowing admin-writeable locations..
        /// </summary>
        internal static string RuntimeRules {
            get {
                return ResourceManager.GetString("RuntimeRules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SignedReputable - SingleFormat.xml.
        /// </summary>
        internal static string SACSingleTemplate {
            get {
                return ResourceManager.GetString("SACSingleTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SignedReputable.xml.
        /// </summary>
        internal static string SACTemplate {
            get {
                return ResourceManager.GetString("SACTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose a Location to Save your WDAC Policy.
        /// </summary>
        internal static string SaveXMLFileDialogTitle {
            get {
                return ResourceManager.GetString("SaveXMLFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When disabled, unsigned PowerShell scripts and interactive PowerShell are no longer restricted to Restricted Language Mode..
        /// </summary>
        internal static string ScriptEnforcement_Info {
            get {
                return ResourceManager.GetString("ScriptEnforcement_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap shield {
            get {
                object obj = ResourceManager.GetObject("shield", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;SiPolicy xmlns=&quot;urn:schemas-microsoft-com:sipolicy&quot; PolicyType=&quot;Base Policy&quot;&gt;
        ///  &lt;VersionEx&gt;10.0.1.0&lt;/VersionEx&gt;
        ///  &lt;PlatformID&gt;{2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}&lt;/PlatformID&gt;
        ///  &lt;Rules&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Unsigned System Integrity Policy&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Advanced Boot Options Menu&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:UMCI&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Inherit D [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SignedReputable {
            get {
                return ResourceManager.GetString("SignedReputable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule applies to all files signed by this issuing CA and publisher, 
        ///with a version at or above this specified file version number..
        /// </summary>
        internal static string SignedVersionInfo {
            get {
                return ResourceManager.GetString("SignedVersionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this rule option is enabled, WDAC policies will also apply to Universal Windows applications..
        /// </summary>
        internal static string StoreApps_Info {
            get {
                return ResourceManager.GetString("StoreApps_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deny rules are ignored in supplemental policies by WDAC. Since supplemental policies are meant to expand what the base policy trusts, only allow rules are supported in supplemental policies. .
        /// </summary>
        internal static string SupplementalPolicyDenyRuleError {
            get {
                return ResourceManager.GetString("SupplementalPolicyDenyRuleError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this option on a base policy to allow supplemental policies to expand it..
        /// </summary>
        internal static string SuppPolicies_Info {
            get {
                return ResourceManager.GetString("SuppPolicies_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WDACWizard\Temp\BaseTemplates\.
        /// </summary>
        internal static string TemplatePath {
            get {
                return ResourceManager.GetString("TemplatePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap toggle {
            get {
                object obj = ResourceManager.GetObject("toggle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap toggle_lg {
            get {
                object obj = ResourceManager.GetObject("toggle_lg", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap tools {
            get {
                object obj = ResourceManager.GetObject("tools", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow by path: .
        /// </summary>
        internal static string TruncatedPathAllowFriendlyName {
            get {
                return ResourceManager.GetString("TruncatedPathAllowFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deny by path: .
        /// </summary>
        internal static string TruncatedPathDenyFriendlyName {
            get {
                return ResourceManager.GetString("TruncatedPathDenyFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, user-mode executables and scripts are validated, in addition to kernel-mode binaries..
        /// </summary>
        internal static string UMCI_Info {
            get {
                return ResourceManager.GetString("UMCI_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows the policy to remain unsigned. When this option is removed, the policy must be signed..
        /// </summary>
        internal static string UnsignedPolicy_Info {
            get {
                return ResourceManager.GetString("UnsignedPolicy_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Wizard could not parse any Advanced Hunting events from the CSV file(s)..
        /// </summary>
        internal static string UnsuccessfulAdvancedHuntingLogConversion {
            get {
                return ResourceManager.GetString("UnsuccessfulAdvancedHuntingLogConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conversion of the event log to a WDAC Policy XML file was unsuccessful. Please try another file. .
        /// </summary>
        internal static string UnsuccessfulEventLogConversion {
            get {
                return ResourceManager.GetString("UnsuccessfulEventLogConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Wizard did not parse any WDAC events from the selected .evtx files..
        /// </summary>
        internal static string UnsuccessfulEventLogConversionZeroEvents {
            get {
                return ResourceManager.GetString("UnsuccessfulEventLogConversionZeroEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A cryptographic algorithm that isn&apos;t supported by WDAC was found. Unfortunately, a publisher rule cannot be used to allow or deny this file. .
        /// </summary>
        internal static string UnsupportedCrypto_Error {
            get {
                return ResourceManager.GetString("UnsupportedCrypto_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This option is not currently supported ....
        /// </summary>
        internal static string UnsupportedRule_Info {
            get {
                return ResourceManager.GetString("UnsupportedRule_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap untoggle {
            get {
                object obj = ResourceManager.GetObject("untoggle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap untoggle_lg {
            get {
                object obj = ResourceManager.GetObject("untoggle_lg", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap untoggle_old {
            get {
                object obj = ResourceManager.GetObject("untoggle_old", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap verified {
            get {
                object obj = ResourceManager.GetObject("verified", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_close {
            get {
                object obj = ResourceManager.GetObject("white_close", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_draft {
            get {
                object obj = ResourceManager.GetObject("white_draft", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_expand {
            get {
                object obj = ResourceManager.GetObject("white_expand", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_merge {
            get {
                object obj = ResourceManager.GetObject("white_merge", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_minimize {
            get {
                object obj = ResourceManager.GetObject("white_minimize", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_right_arrow {
            get {
                object obj = ResourceManager.GetObject("white_right_arrow", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_view {
            get {
                object obj = ResourceManager.GetObject("white_view", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, kernel-mode drivers must be WHQL-signed. Legacy cross-signed drivers will not be trusted..
        /// </summary>
        internal static string WHQL_Info {
            get {
                return ResourceManager.GetString("WHQL_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap windows_10s_logo {
            get {
                object obj = ResourceManager.GetObject("windows_10s_logo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap windows_logo {
            get {
                object obj = ResourceManager.GetObject("windows_logo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DefaultWindows_Audit - SingleFormat.xml.
        /// </summary>
        internal static string WindowsSingleTemplate {
            get {
                return ResourceManager.GetString("WindowsSingleTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DefaultWindows_Audit.xml.
        /// </summary>
        internal static string WindowsTemplate {
            get {
                return ResourceManager.GetString("WindowsTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WDAC Wizard could not open the WDAC XML file. The most likely reason is that the Wizard failed to build the policy file.
        ///
        ///Please check the log file in .
        /// </summary>
        internal static string XMLFileOpen_Error {
            get {
                return ResourceManager.GetString("XMLFileOpen_Error", resourceCulture);
            }
        }
    }
}
